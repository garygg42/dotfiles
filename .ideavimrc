set hlsearch                              " highlight search occurrences
set ignorecase                            " ignore case in search patterns
set smartcase                             " no ignore case when pattern is uppercase
set incsearch                             " show search results while typing
set wrapscan                              " searches wrap around the end of the file
set gdefault                              " substitute all occurrences in line per default
set history=10000                         " keep x lines of command line history
set scrolloff=5 sidescrolloff=10          " keep some lines before and after the cursor visible
set clipboard=unnamedplus,unnamed,ideaput " integrate with system clipboard
"set multiple-cursors
"set surround                              " emulate vim-surround plugin
set NERDTree
set commentary
set ideajoin
set visualbell

nnoremap <SPACE> <Nop>
let mapleader = ' '

"EditorCloneCaretBelow
map <C-k> :action EditorCloneCaretAbove<CR>
map <C-j> :action EditorCloneCaretBelow<CR>

" Code navigation
nmap <leader>l <Action>(ReformatCode)<Esc><Action>(OptimizeImports)<Esc>
map s <Action>(Back)<Esc>
map S <Action>(Forward)<Esc>

nmap <leader>/ :noh<cr>

nmap gd <Action>(GotoDeclaration)<Esc>
nmap gD <Action>(GotoImplementation)<Esc>

nmap <leader>f <Action>(FindInPath)<Esc>
nmap <leader>o <Action>(GotoClass)<Esc>

nmap <leader>cr <Action>(Vcs.RollbackChangedLines)<Esc>
nmap <leader>cb <Action>(Git.CompareWithBranch)<Esc>
nmap <leader>cn <Action>(VcsShowNextChangeMarker)<Esc>
nmap <leader>cm <Action>(VcsShowPrevChangeMarker)<Esc>
nmap <leader>ch <Action>(Vcs.ShowTabbedFileHistory)<Esc>
nmap <leader>cc <Action>(CheckinProject)<Esc>
nmap <leader>cu <Action>(Vcs.UpdateProject)<Esc>

nmap <leader>bf <Action>(ActivateBookmarksToolWindow)<Esc>
nmap <leader>ba <Action>(ToggleBookmark)<Esc>
nmap <leader>bn <Action>(GotoNextBookmark)<Esc>
nmap <leader>bm <Action>(GotoPreviousBookmark)<Esc>

nmap <leader>s <Action>(ActivateStructureToolWindow)<Esc>
nmap <leader>d <Action>(ChooseDebugConfiguration)<Esc>
nmap <leader>df <Action>(ActivateDebugToolWindow)<Esc>

nmap <leader>e <Action>(RecentFiles)<Esc>

nmap <tab> <Action>(NextTab)<Esc>
nmap <s-tab> <Action>(PreviousTab)<Esc>

nmap x <Action>(CloseEditor)<Esc>
nmap <leader>x <Action>(CloseAllEditorsButActive)<Esc>
nmap <leader>a <Action>(HideAllWindows)<Esc>
nmap <leader>a <Action>(HideAllWindows)<Esc>

let g:NERDTreeMapActivateNode = 'l'
let g:NERDTreeMapJumpParent = 'h'

nmap <leader>n <Esc> :NERDTreeFind<cr>
nmap <leader>m <Esc> :NERDTreeFocus<cr>
